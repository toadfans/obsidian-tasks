name: Build and Release

on:
  push:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Get version from manifest.json
        id: version
        run: |
          VERSION=$(node -p "require('./manifest.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version from manifest.json: ${VERSION}"

      # Build the plugin
      - name: Build
        id: build
        run: |
          yarn
          yarn run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            main.js
            manifest.json
            styles.css

      - name: Check if release exists
        id: check_release
        if: github.ref == 'refs/heads/main'
        run: |
          if gh release view "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.version.outputs.version }} already exists, skipping release..."
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.version.outputs.version }} does not exist, will create..."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: github.ref == 'refs/heads/main' && steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            main.js
            manifest.json
            styles.css
          body: |
            Release version ${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
